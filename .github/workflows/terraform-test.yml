name: Terraform Test and Validation

permissions:
  contents: read
  security-events: write

on:
  push:
    branches: [main, develop, staging]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform-test.yml'
  pull_request:
    branches: [main, develop, staging]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform-test.yml'

env:
  TF_VERSION: "1.7.0"

jobs:
  validate:
    name: 'Terraform Format & Validate'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format Fix
        run: terraform fmt -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Check for Hardcoded Sensitive Data
        run: |
          echo "üîç Scanning for hardcoded sensitive data..."
          FOUND=$(grep -r --include=*.tf --include=*.tfvars --exclude-dir=.terraform \
            -E '["'\'']?(password|secret|key)["'\'']?\s*=\s*["'\''][^${]' . | \
            grep -vE 'var\.|sensitive|module\.|vault_uri|vault_name|vault_id|description|resource|output')

          if [[ -n "$FOUND" ]]; then
            echo "‚ùå Potential hardcoded sensitive data found:"
            echo "$FOUND"
            exit 1
          else
            echo "‚úÖ No hardcoded sensitive data detected."
          fi


  security-scan:
    name: 'Trivy Security Scan'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy config scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
