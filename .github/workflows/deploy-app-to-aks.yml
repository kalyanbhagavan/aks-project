name: Deploy App to Private AKS

on:
  push:
    branches: [main, develop]
    paths:
      - 'k8s/**'
      - 'Dockerfile'
      - 'index.html'
      - '.github/workflows/deploy-app-to-aks.yml'
  pull_request:
    branches: [main]
    paths:
      - 'k8s/**'
      - 'Dockerfile'
      - 'index.html'
      - '.github/workflows/deploy-app-to-aks.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options: [development, staging, production]
      skip_docker_build:
        description: 'Skip Docker build and push (use existing image)'
        required: false
        type: boolean
        default: false

jobs:
  deploy:
    name: Deploy to Private AKS via Jumpbox
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Validate Required Secrets
        run: |
          for key in JUMPBOX_IP JUMPBOX_PASSWORD ACR_USERNAME ACR_PASSWORD ACR_NAME RESOURCE_GROUP_NAME AKS_CLUSTER_NAME; do
            if [[ -z "${{ secrets[$key] }}" ]]; then
              echo "❌ Secret $key is missing!"
              exit 1
            fi
          done

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Test Jumpbox SSH Access
        run: sshpass -p "${{ secrets.JUMPBOX_PASSWORD }}" ssh -o StrictHostKeyChecking=no azureuser@${{ secrets.JUMPBOX_IP }} "echo Connected"

      - name: Build & Push Docker Image
        if: ${{ !github.event.inputs.skip_docker_build }}
        run: |
          echo "Building Docker image..."

          if [ ! -f Dockerfile ]; then
            cat > Dockerfile <<'EOF'
FROM nginx:alpine
COPY index.html /usr/share/nginx/html/
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
EOF
          fi

          if [ ! -f index.html ]; then
            cat > index.html <<'EOF'
<!DOCTYPE html>
<html>
<head><title>AKS Demo</title></head>
<body><h1>✅ Deployed via GitHub Actions</h1></body>
</html>
EOF
          fi

          IMAGE_TAG="${{ github.sha }}-$(date +%s)"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_ENV

          echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_NAME }}.azurecr.io \
            --username ${{ secrets.ACR_USERNAME }} --password-stdin

          docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/nginx-demo:$IMAGE_TAG .
          docker tag ${{ secrets.ACR_NAME }}.azurecr.io/nginx-demo:$IMAGE_TAG ${{ secrets.ACR_NAME }}.azurecr.io/nginx-demo:latest
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/nginx-demo:$IMAGE_TAG
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/nginx-demo:latest

      - name: Prepare k8s and script files
        run: |
          mkdir -p k8s scripts

          cat > k8s/deployment.yaml <<'EOF'
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-demo
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx-demo
  template:
    metadata:
      labels:
        app: nginx-demo
    spec:
      containers:
        - name: nginx-demo
          image: ACR_PLACEHOLDER.azurecr.io/nginx-demo:latest
          ports:
            - containerPort: 80
EOF

          sed -i "s|ACR_PLACEHOLDER|${{ secrets.ACR_NAME }}|g" k8s/deployment.yaml

          cat > scripts/deploy-to-private-aks.sh <<'EOF'
#!/bin/bash
set -e

az login --service-principal -u "$ARM_CLIENT_ID" -p "$ARM_CLIENT_SECRET" --tenant "$ARM_TENANT_ID"
az account set --subscription "$ARM_SUBSCRIPTION_ID"

az aks get-credentials --resource-group "$RESOURCE_GROUP" --name "$AKS_NAME" --overwrite-existing
kubectl apply -f ~/k8s/
kubectl rollout status deployment/nginx-demo
kubectl get svc nginx-demo-lb
EOF
          chmod +x scripts/deploy-to-private-aks.sh

      - name: Copy Files to Jumpbox
        run: |
          sshpass -p "${{ secrets.JUMPBOX_PASSWORD }}" scp -o StrictHostKeyChecking=no -r k8s scripts azureuser@${{ secrets.JUMPBOX_IP }}:~/

      - name: Run Deployment from Jumpbox
        run: |
          sshpass -p "${{ secrets.JUMPBOX_PASSWORD }}" ssh -o StrictHostKeyChecking=no azureuser@${{ secrets.JUMPBOX_IP }} << 'EOF'
            export ARM_CLIENT_ID="${{ secrets.ARM_CLIENT_ID }}"
            export ARM_CLIENT_SECRET="${{ secrets.ARM_CLIENT_SECRET }}"
            export ARM_TENANT_ID="${{ secrets.ARM_TENANT_ID }}"
            export ARM_SUBSCRIPTION_ID="${{ secrets.ARM_SUBSCRIPTION_ID }}"
            export RESOURCE_GROUP="${{ secrets.RESOURCE_GROUP_NAME }}"
            export AKS_NAME="${{ secrets.AKS_CLUSTER_NAME }}"
            bash ~/scripts/deploy-to-private-aks.sh
EOF

      - name: Get App URL
        id: get-url
        run: |
          for i in {1..10}; do
            EXTERNAL_IP=$(sshpass -p "${{ secrets.JUMPBOX_PASSWORD }}" ssh -o StrictHostKeyChecking=no azureuser@${{ secrets.JUMPBOX_IP }} \
              "kubectl get svc nginx-demo-lb -o jsonpath='{.status.loadBalancer.ingress[0].ip}'" || echo "")
            if [[ "$EXTERNAL_IP" != "" && "$EXTERNAL_IP" != "<none>" ]]; then
              echo "app_url=http://$EXTERNAL_IP" >> $GITHUB_OUTPUT
              break
            fi
            sleep 15
          done

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 Deployment Complete!\n\nURL: ${{ steps.get-url.outputs.app_url }}`
            })

      - name: Deployment Summary
        run: |
          echo "## 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**App URL:** ${{ steps.get-url.outputs.app_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- Cluster: ${{ secrets.AKS_CLUSTER_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- Resource Group: ${{ secrets.RESOURCE_GROUP_NAME }}" >> $GITHUB_STEP_SUMMARY
