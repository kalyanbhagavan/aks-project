name: Reusable Terraform Workflow

on:
  workflow_call:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        type: string
        default: 'plan'
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
        default: 'production'
      working-directory:
        description: 'Directory containing Terraform files'
        required: false
        type: string
        default: '.'
      terraform-version:
        description: 'Terraform version to use'
        required: false
        type: string
        default: '1.7.0'
      auto-approve:
        description: 'Auto approve Terraform operations'
        required: false
        type: boolean
        default: false
    secrets:
      AZURE_CREDENTIALS:
        required: true
      TF_STATE_STORAGE_ACCOUNT:
        required: true
      TF_STATE_CONTAINER:
        required: true
      TF_STATE_KEY:
        required: true

env:
  TF_VERSION: ${{ inputs.terraform-version }}
  TF_STATE_STORAGE_ACCOUNT: ${{ secrets.TF_STATE_STORAGE_ACCOUNT }}
  TF_STATE_CONTAINER: ${{ secrets.TF_STATE_CONTAINER }}
  TF_STATE_KEY: ${{ secrets.TF_STATE_KEY }}

jobs:
  terraform:
    name: 'Terraform ${{ inputs.action }}'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform Backend
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "Setting up Terraform backend configuration..."
          cat > backend.tf <<EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "${{ env.TF_STATE_STORAGE_ACCOUNT }}rg"
              storage_account_name = "${{ env.TF_STATE_STORAGE_ACCOUNT }}"
              container_name       = "${{ env.TF_STATE_CONTAINER }}"
              key                  = "${{ env.TF_STATE_KEY }}"
            }
          }
          EOF

      - name: Terraform Init
        working-directory: ${{ inputs.working-directory }}
        run: terraform init

      - name: Terraform Format Check
        working-directory: ${{ inputs.working-directory }}
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        working-directory: ${{ inputs.working-directory }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ${{ inputs.working-directory }}
        run: |
          terraform plan -out=tfplan
          terraform show -no-color tfplan > tfplan.txt
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: inputs.action == 'apply'
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.auto-approve }}" = "true" ]; then
            terraform apply -auto-approve tfplan
          else
            terraform apply tfplan
          fi

      - name: Terraform Destroy
        if: inputs.action == 'destroy'
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.auto-approve }}" = "true" ]; then
            terraform destroy -auto-approve
          else
            terraform destroy
          fi

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: terraform-plan-${{ inputs.action }}
          path: ${{ inputs.working-directory }}/tfplan.txt
          retention-days: 30